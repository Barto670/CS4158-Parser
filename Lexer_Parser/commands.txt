//with parser and lexer//

1)
flex lexer.l   

2)
bison -d -t parser.y  

3)
gcc lex.yy.c parser.tab.c

4)
./a





//only lexer//

1)
flex lexer.l   


2)
gcc lex.yy.c

3)
./a



bison -d parser.y; flex lexer.l; gcc -Wno-write-strings -o a lex.yy.c parser.tab.c;

|   DECLARATION VARNAME DOT EOL {for (int i = 0; i < 5; ++i) {printf("%c, ", $2[i]);};}

|   DECLARATION VARNAME DOT EOL {printf($2);}

|   DECLARATION VARNAME DOT EOL {name[i] = $2 ; size[i] = $1 ; value[i] = 0; i=i+1; printf(name[0]) ; printf(size[0]) ; printf(value[0]); printf(i)}

|   DECLARATION VARNAME DOT EOL {printf("String of name: ");printf($2); printf("has lenght: %d", $1); }

// |   numexp PLUS numexp { $$ = $1 + $3; }

    char *value[100] = {};
    char *size[100] = {};
    char *name[100] = {};
    int i = 0;


/* %option c++ /*





input:
|   line input
;

line: 
    numexp DOT EOL  {printf("%d\n", $1);}
|   BEGINING DOT EOL {printf("Begining");}
|   BODY DOT EOL {printf("BODY");}
|   END DOT EOL {printf("END");}
|   PRINT printcontent DOT EOL {printf("String = %d\n", $2);}
|   ADD VARNAME TO VARNAME DOT EOL {printf("String = %d\n", $2);}
|   MOVE NUMBER TO VARNAME DOT EOL {printf("String = %d\n", $2);}
|   INPUT VARNAME DOT EOL {printf("String = %d\n", $2);}
|   DECLARATION VARNAME DOT EOL {printf("String of name: ");printf($2);printf("has lenght: %d", $1);}
|   DECLARATION DECLARATION DOT EOL { yyerror("    Variable name cannot be only 'x' or 'X'")}
|   EOL
;

strfiller:
    VARNAME
|   STRING
;

printcontent:
    strfiller { $$ = $1;} 
|   printcontent SEMICOLON printcontent { $$ = $1;}

numexp:
    NUMBER { $$ = $1;} 
;






    char value[100] = {};
    int size[100] = {};
    char *name[100] = {};
    int i = 0;